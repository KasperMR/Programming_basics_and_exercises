//E1
//A bank has asked you to make a program that displays the value of an account with 10000$ in it after every year for
//a 50 year period with a 2% compounding interest
//use a for-loop to complete the task
//afterwards try incorporating a yearly 1000$ deposit into the account


//E2
//make a program to calculate your age in seconds, given your birthday as 3 variables, birth year, birth month, birth day.
//you can ignore leap years
//hint: start with whole years, add excess days, then multiply to get to seconds.
//hint: make an array containing the number of days in each month
//you can get the current date information with the following functions (excluding '.ToString()' )
Console.WriteLine("year: " + DateTime.Now.Year.ToString());
Console.WriteLine("month: " + DateTime.Now.Month.ToString());
Console.WriteLine("day: " + DateTime.Now.Day.ToString());
Console.WriteLine("hour: " + DateTime.Now.Hour.ToString());
Console.WriteLine("minute: " + DateTime.Now.Minute.ToString());
Console.WriteLine("second: " + DateTime.Now.Second.ToString());

//E3
//Youve been hired by the pokemon company to create the next generations pokemon names.
//But unfortunately you've procrastinated and don't have time to come up with 500 new names manually,
//so you decide to write a program to randomly generate the names from the english alphabet,
//with a random length between 4 and 18 characters.
//write the names to the console

//i can build my own name using parts of the alphabet
string alphabet = "QWERTYUIOPASDFGHJKLZXCVBNM";
string myName = string.Empty;
myName += alphabet[17];
myName += alphabet[10];
myName += alphabet[11];
myName += alphabet[9];
myName += alphabet[2];
myName += alphabet[3];
Console.WriteLine(myName);


//E4
//Unfortunately your bosses at the pokemon company werent happy with your names that contain no vowels,
//so now you'll have to adapt your previous code to make sure you include at least one vowel somewhere in the name (you cant just start or end every name with a vowel)
//make a copy of your code and keep it separate from the original
//Now in your spare copy use the Contains (example follows) function to check each position in the name of the pokemon to see if it has a vowel
//if it does NOT contain any vowels replace a random letter in the name with a vowel
string vowels = "AEIOU";
for (int i = 0; i < myName.Length; i++)
{
    if (vowels.Contains(myName[i]))
    {
        Console.WriteLine(myName[i] + " is a vowel");
    }
    else
    {
        Console.WriteLine(myName[i] + " is not a vowel");
    }
}


//E5
//Rewrite the pokemon name generator, predetermining the number and position of the vowels, using random number generation for both, then build the name string
//E5.1 
//calculate the odds of generating the name "pikachu", first with the E3 solution, then with the E5 solution

//E6
//Retrofit your pokemon name generator to be a function, with the length of the names as a parameter


//E7
//include the leap years in your age calculators (DateTime.IsLeapYear(year) returns a boolean(true/false) for if it is or isn't)


//E8 
//Write functions that recreate the results of multiplcation, division(with remainder), and faculty, using only plus and minus with loops

//E9
//create a program that generates a random whole number between 1 and 10 (the Next function exludes the max value), 
//then make the player try to guess the number over and over until they guess correctly (using Console.ReadLine to get player input)
int intOne = 1;
string stringOne = intOne.ToString();
string consoleLine = Console.ReadLine();
if (intOne.ToString() == stringOne)//turning the number into a string
{
    Console.WriteLine("succesful comparison");
}
if (intOne == Int32.Parse(stringOne))//turning the string into a number
{
    Console.WriteLine("succesful comparison");
}

//E10
//Build a function to house your age in seconds calculator, taking the birth day, month, and year, as parameters

//E11
//https://programmering.systime.dk/?id=163#c1100

//E12
//https://programmering.systime.dk/?id=162#c847 hint: compare letters from each end towards the center
//remember individual characters in strings can be referenced like variables in an array

//E13
//https://programmering.systime.dk/?id=162#c1088 hint: 
string iAmAString = "i have overwritten hello world";
iAmAString.Contains("world");

//E14
//Write two functions, one for converting celsius to farenheit, and another for the reverse, returning the converted value for both functions

//E15
//Write a function that uses a loop to recieve number inputs from the user, but only saves the highest number, 
//return the highest input number and end the function when the user inputs "Quit"

//E16
//Calculate Exponentiation: Create a function that calculates the result of raising a given base to a specified positive integer exponent using a loop.
//For example, calculate 2^4 using the function.

//E17
//Create a C# program that prints the following pattern, but you're only allowed to write one Console.WriteLine command:
//*
//**
//***
//****
//*****

//E18
//Using the description on the following webpage, write a function to convert a whole positive number to binary
//https://www.rapidtables.com/convert/number/decimal-to-binary.html

//E19
//https://programmering.systime.dk/?id=162#c847 hint: compare letters from each end towards the center
//remember individual characters in strings can be referenced like variables in an array

//E20

//E21
//https://programmering.systime.dk/?id=162#c1090
//try googling the problem instead of reinventing the wheel

//E22
//https://programmering.systime.dk/?id=162#c1097
//return an array instead of a list

//E23
//Create a function that takes 2 integer parameters, a lower bound and an upper bound, then calculate and return the sum of all the integers between the upper and lower bound, including both the upper and lower bound

//E24
//Create another function like the one in E23, but that excludes both the upper and lower bound, i.e. if the lower bound is 1 and the upper bound is 5, then it starts at 2 and ends at 4

//E25
//Create a function that takes an array of floats, and a boolean as a parameter, if the boolean parameter is true, return the largest number in the array, if the boolean is false, return the index of the largest number in the array

//E26
//Create a function that returns nothing, but prints the multiplication table of the first integer parameter, and how deep into the multiplication table it should go as the second parameter.

//E27
//Create a function that takes an integer parameter, and returns wether it is a prime number